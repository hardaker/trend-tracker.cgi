#!/usr/bin/perl

use DBI;
use strict;
use Carp;
use IO::File;

my %opts = ('d' => 'trend-tracker.sqlite',
	    'c' => 'trend-tracker.config',
	    'D' => 'DBI:SQLite:dbname=');
LocalGetOptions(\%opts,
		['GUI:VERSION',     "trend-tracker version: 0.71"],
		["c|config-file=s", "Config file to read"],
		['t|table=s',       'Database table name'],
    ) || die;

our %config;
read_config($opts{'c'});

# pull out the various data keys
my $key         = $config{'key'};
my $parameters  = config_array('parameters');
my $extras      = config_array('extras');

my $table       = $opts{'t'} || $config{'table'} || "data" ; 

# create the table creation string
my $dbcreate = "create table $table (cgipid int, timestamp int, remoteaddress varchar(2096), $key varchar(2096), ";

foreach my $parameter (@$parameters, @$extras) {
    $dbcreate .= "$parameter varchar(2096), ";
}

$dbcreate =~ s/, $/)/;

# actually perform the connection and creation
my $dbh = DBI->connect($config{'database'},
		       $config{'dbuser'}, $config{'dbpassword'});

$dbh->do("create table trendTrackerParameters
                 (name varchar(255), value varchar(1024))");
$dbh->do("insert into trendTrackerParameters values('dbversion', '1')");
$dbh->do($dbcreate);

#### WARNING: Must Match Copy in trend-tracker.cgi
#             (to keep that file self-contained, we duplicate it there)
sub read_config {
    my ($file) = @_;
    my $fh = new IO::File;
    if (! -f $file || !$fh->open($file)) {
	Error("failed to open the config file: $file");
    }

    while(<$fh>) {
	next if (/^\s*#/);
	next if (/^\s*$/);
	Error ("Illegal configuration directive: $_") if (! /:/);
	
	my ($key, $value) = /^\s*([^:]+):\s*(.*)/;
	if ($key eq 'include') {
	    read_config($value);
	} else {
	    $config{$key} = $value;
	}
    }
}

# splits a config token into separate pieces; Default separation is by comma
sub config_array {
    my ($token, $separator) = @_;

    return []          if (!exists($config{$token}));
    $separator = ","   if (!defined($separator));

    my @results = split(/$separator\s*/, $config{$token});
    return \@results;
}

######################################################################
# getopt::gui::long wrapper
#
sub LocalGetOptions {
    if (eval {require Getopt::GUI::Long;}) {
	import Getopt::GUI::Long;
	# optional configure call
	Getopt::GUI::Long::Configure(qw(display_help no_ignore_case capture_output no_gui));
	return GetOptions(@_);
    }
    require Getopt::Long;
    import Getopt::Long;
    # optional configure call
    Getopt::Long::Configure(qw(auto_help no_ignore_case));
    GetOptions(LocalOptionsMap(@_));
}

sub LocalOptionsMap {
    my ($st, $cb, @opts) = ((ref($_[0]) eq 'HASH')
			    ? (1, 1, $_[0]) : (0, 2));
    for (my $i = $st; $i <= $#_; $i += $cb) {
	if ($_[$i]) {
	    next if (ref($_[$i]) eq 'ARRAY' && $_[$i][0] =~ /^GUI:/);
	    push @opts, ((ref($_[$i]) eq 'ARRAY') ? $_[$i][0] : $_[$i]);
	    push @opts, $_[$i+1] if ($cb == 2);
	}
    }
    return @opts;
}

=pod

=head1 NAME

createdb -- create the needed sql database for storing trend-tracker data

=head1 SYNOPSIS

 # createdb -c trend-tracker.config

=head1 DESCRIPTION

The B<createdb> is used to create a database table for storing the
collected data in.  It will create a table, named based on the .config
file or the command line -t flag, with the following columns:

 - cgipid        int
 - timestamp     int
 - remoteaddress varchar(2096)
 - KEY           varchar(2096)
 - PARAMETER1    varchar(2096)
 - PARAMETER2    varchar(2096)
 - ...           varchar(2096)

The trend-tracker.cgi script will then store the data into this table
when it runs to collect data, and the trend-analysis script will read
and interpret the results.

=head1 OPTIONS

=over

=item  -c STRING



=item  --config-file=STRING

Config file to read

=item  -t STRING



=item  --table=STRING

Database table name

=back

=head1 SEE ALSO

trend-tracker.cgi(1), trend-analysis(1)

=head1 AUTHOR

Wes Hardaker E<lt>opensource AT hardakers DOT netE<gt>

=head1 COPYRIGHT and LICENSE

Copyright (c) 2012 Wes Hardaker

All rights reserved.  This program is free software; you may
redistribute it and/or modify it under the same terms as Perl itself.

#
# include: /etc/trend-tracker.config
#      Allows you to include files elsewhere on the system.  This is
#      actually the recommended way to store configuration, as it
#      hides the rest of the configuration file outside the
#      web-searchable areas.  Instead, put the rest of this file in something
#      like /etc/trend-tracker.config and include that instead.
include: /etc/trend-tracker.config
#
# database: DBI:SQLite:dbname=trend-tracker.sqlite3
#      The perl DBI database handle to use for the connection
# database: DBI:mysql:host=hostname;port=portnum;database=dbname
database: DBI:SQLite:dbname=trend-tracker.sqlite3
#
# dbuser: user
# dbpassword: password
#      If the database needs to be accessed with a username, eg for
#      mysql and postgress usage, you can pass them in with these
#      tokens:
dbuser: user
dbpassword: password
#
# table:    mydata
#      Names the table where the data is stored; useful if data is
#      coming into multiple data sets.  If this isn't set, it's pulled
#      from the incoming 'table' parameter.  If that is unset, it
#      assumes "data" is right.
table: mydata
#
# key: foo
#      this field is used to determine if there is data for a given numeric
#      slot.  EG, if the key is "foo" then the data collection engine will
#      look for "foo0", "foo1", ... and will collect data until one is found
#      to be empty.
#
key:         who
#
# parameters: name, supercool, gravity
#      This collects the list of parameters to collect for each of the keys
#      found.  For example, if the above three parameters are listed, then
#      the data collection engine will look for name0, supercool0, gravity0,
#      and so on, for each key found
parameters:  favoritecolor, favoritefood, favoritedrink
#
# extras: dataversion, comment
#      Contains a list of 'singular' extra values to be collected as well.
#
extras:      dataversion,surveyversion
#
# values: regexp
#      This defines a regular expression that each of the parameters
#      is allowed to match against.  If not set, then any value will
#      be assumed to be ok.  Make sure to bound the expression by ^
#      and $ if it must match exactly from beginning to end.
values:      ^([a-zA-Z0-9 ])$
keyvalues:   ^[a-zA-Z ])$
extravalues: ^[0-9\.]+$
#
# logaddress: sha1
#      Either a 1 value to indicate logging the incoming connection address
#      with the data, or a sha1 hash if you want to anonomize the data a bit
#      before storing it
logaddress:  sha1
#startat:     0
#
# thankyounote: <h2>Thank you</h2> <p>so much for your submission!</p>
#      If exits, this prints a thank you message for the data they submitted
thankyounote: <h2>Thank you</h2> <p>so much for your submission!</p>
#
# thankyounotefile:  myfile.html
#      If defined, this dumps the contents of the file to the output
#      when a submission is received.  Note that the contents will be
#      printed after the 'thankyounote' token contents.  Either, both
#      or none of these two directives can be used.
thankyounotefile:  myfile.html
# welcomenote:       welcome.html
#      What file to show when no input parameters are found.  If
#      unset, an error message will be displayed.
welcomenote:       welcome.html
#
# analysisStart:  analysisHeader.html
#      The file to print at the top of the analysis output.
# analysisEnd:    analysisFooter.html
#      The file to print at the bottom of the analysis output.
analysisStart: analysisStart.html
analysisEnd: analysisEnd.html
# analysisReports: reportItem1, reportItem2, ...
#      This is a list of reports you want trend-analysis to run and
#      print out.  The results will be printed in the order list in
#      the output file.  The default set will likely be sufficient to
#      most people.
#
#      Reports available (+ = in the default set, - = not a default):
#
#      + number_of_submitter_addresses
#      + number_of_resolvers
#      + table_percentage_breakdown_by_server
#      + table_percentage_breakdown_by_submission_address
#      - detailed_percentage_breakdown_by_server
#      - detailed_percentage_breakdown_by_submission_address
# analysisReports: 
#
# value mapping:
#      This lets you change the results displayed in the analysis into
#      different names.  In particular, this is useful for mapping
#      numeric values to given names.  You can either map them
#      generically (applies to all data) using "value.XXX: newName" or
#      specifically for a given data type using "value.PARAMETER.XXX:
#      newName", the later being more specific and overriding the generic.
value.1: yes
value.2: no
value.color.1: red
value.color.2: green
